{"version":3,"sources":["webpack:///../webpack/bootstrap","webpack:///../external \"@microsoft/sp-dialog\"","webpack:///../external \"@microsoft/sp-listview-extensibility\"","webpack:///../external \"@microsoft/sp-core-library\"","webpack:///.././src/extensions/apFormCommandSet/ApFormCommandSetCommandSet.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA,kD;;;;;;;;;;;;ACAA,mD;;;;;;;;;;;;ACAA,kD;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiD;AAMH;AACA;AAa9C,MAAM,UAAU,GAAW,4BAA4B,CAAC;AAEzC,MAAM,0BAA2B,SAAQ,2FAA6D;IAArH;;QA+BU,4BAAuB,GAAG,CAAC,IAAmC,EAAQ,EAAE;;YAC9E,8DAAG,CAAC,IAAI,CAAC,UAAU,EAAE,yBAAyB,CAAC,CAAC;YAEhD,MAAM,iBAAiB,GAAY,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YACnE,IAAI,iBAAiB,EAAE;gBACrB,oEAAoE;gBACpE,iBAAiB,CAAC,OAAO,GAAG,WAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,0CAAE,MAAM,MAAK,CAAC,CAAC;aAC9E;YAED,4BAA4B;YAE5B,gEAAgE;YAChE,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;IACH,CAAC;IA3CQ,MAAM;QACX,8DAAG,CAAC,IAAI,CAAC,UAAU,EAAE,wCAAwC,CAAC,CAAC;QAE/D,4CAA4C;QAC5C,MAAM,iBAAiB,GAAY,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QACnE,iBAAiB,CAAC,OAAO,GAAG,KAAK,CAAC;QAElC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAExF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,SAAS,CAAC,KAAgD;QAC/D,QAAQ,KAAK,CAAC,MAAM,EAAE;YACpB,KAAK,WAAW;gBACd,2DAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;oBAC1D,kBAAkB;gBACpB,CAAC,CAAC,CAAC;gBACH,MAAM;YACR,KAAK,WAAW;gBACd,2DAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE;oBAC1D,kBAAkB;gBACpB,CAAC,CAAC,CAAC;gBACH,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC;SACtC;IACH,CAAC;CAgBF","file":"ap-form-command-set-command-set.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"cqlJ\");\n","module.exports = __WEBPACK_EXTERNAL_MODULE__Cqt__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7wVe__;","module.exports = __WEBPACK_EXTERNAL_MODULE_UWqr__;","import { Log } from '@microsoft/sp-core-library';\nimport {\n  BaseListViewCommandSet,\n  type Command,\n  type IListViewCommandSetExecuteEventParameters,\n  type ListViewStateChangedEventArgs\n} from '@microsoft/sp-listview-extensibility';\nimport { Dialog } from '@microsoft/sp-dialog';\n\n/**\n * If your command set uses the ClientSideComponentProperties JSON input,\n * it will be deserialized into the BaseExtension.properties object.\n * You can define an interface to describe it.\n */\nexport interface IApFormCommandSetCommandSetProperties {\n  // This is an example; replace with your own properties\n  sampleTextOne: string;\n  sampleTextTwo: string;\n}\n\nconst LOG_SOURCE: string = 'ApFormCommandSetCommandSet';\n\nexport default class ApFormCommandSetCommandSet extends BaseListViewCommandSet<IApFormCommandSetCommandSetProperties> {\n\n  public onInit(): Promise<void> {\n    Log.info(LOG_SOURCE, 'Initialized ApFormCommandSetCommandSet');\n\n    // initial state of the command's visibility\n    const compareOneCommand: Command = this.tryGetCommand('COMMAND_1');\n    compareOneCommand.visible = false;\n\n    this.context.listView.listViewStateChangedEvent.add(this, this._onListViewStateChanged);\n\n    return Promise.resolve();\n  }\n\n  public onExecute(event: IListViewCommandSetExecuteEventParameters): void {\n    switch (event.itemId) {\n      case 'COMMAND_1':\n        Dialog.alert(`${this.properties.sampleTextOne}`).catch(() => {\n          /* handle error */\n        });\n        break;\n      case 'COMMAND_2':\n        Dialog.alert(`${this.properties.sampleTextTwo}`).catch(() => {\n          /* handle error */\n        });\n        break;\n      default:\n        throw new Error('Unknown command');\n    }\n  }\n\n  private _onListViewStateChanged = (args: ListViewStateChangedEventArgs): void => {\n    Log.info(LOG_SOURCE, 'List view state changed');\n\n    const compareOneCommand: Command = this.tryGetCommand('COMMAND_1');\n    if (compareOneCommand) {\n      // This command should be hidden unless exactly one row is selected.\n      compareOneCommand.visible = this.context.listView.selectedRows?.length === 1;\n    }\n\n    // TODO: Add your logic here\n\n    // You should call this.raiseOnChage() to update the command bar\n    this.raiseOnChange();\n  }\n}\n"],"sourceRoot":""}